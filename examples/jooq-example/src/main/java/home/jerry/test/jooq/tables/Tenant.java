/*
 * This file is generated by jOOQ.
 */
package home.jerry.test.jooq.tables;


import home.jerry.test.jooq.Keys;
import home.jerry.test.jooq.Token;
import home.jerry.test.jooq.tables.Tokendata.TokendataPath;
import home.jerry.test.jooq.tables.records.TenantRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tenant extends TableImpl<TenantRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Token.Tenant</code>
     */
    public static final Tenant TENANT = new Tenant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantRecord> getRecordType() {
        return TenantRecord.class;
    }

    /**
     * The column <code>Token.Tenant.Id</code>.
     */
    public final TableField<TenantRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Token.Tenant.Name</code>.
     */
    public final TableField<TenantRecord, String> NAME = createField(DSL.name("Name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>Token.Tenant.TenantType</code>.
     */
    public final TableField<TenantRecord, Integer> TENANTTYPE = createField(DSL.name("TenantType"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Token.Tenant.CreatedAtUtc</code>.
     */
    public final TableField<TenantRecord, LocalDateTime> CREATEDATUTC = createField(DSL.name("CreatedAtUtc"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Token.Tenant.UpdatedAtUtc</code>.
     */
    public final TableField<TenantRecord, LocalDateTime> UPDATEDATUTC = createField(DSL.name("UpdatedAtUtc"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>Token.Tenant.IsArchived</code>.
     */
    public final TableField<TenantRecord, Byte> ISARCHIVED = createField(DSL.name("IsArchived"), SQLDataType.TINYINT.nullable(false), this, "");

    private Tenant(Name alias, Table<TenantRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tenant(Name alias, Table<TenantRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Token.Tenant</code> table reference
     */
    public Tenant(String alias) {
        this(DSL.name(alias), TENANT);
    }

    /**
     * Create an aliased <code>Token.Tenant</code> table reference
     */
    public Tenant(Name alias) {
        this(alias, TENANT);
    }

    /**
     * Create a <code>Token.Tenant</code> table reference
     */
    public Tenant() {
        this(DSL.name("Tenant"), null);
    }

    public <O extends Record> Tenant(Table<O> path, ForeignKey<O, TenantRecord> childPath, InverseForeignKey<O, TenantRecord> parentPath) {
        super(path, childPath, parentPath, TENANT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TenantPath extends Tenant implements Path<TenantRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TenantPath(Table<O> path, ForeignKey<O, TenantRecord> childPath, InverseForeignKey<O, TenantRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TenantPath(Name alias, Table<TenantRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TenantPath as(String alias) {
            return new TenantPath(DSL.name(alias), this);
        }

        @Override
        public TenantPath as(Name alias) {
            return new TenantPath(alias, this);
        }

        @Override
        public TenantPath as(Table<?> alias) {
            return new TenantPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Token.TOKEN;
    }

    @Override
    public Identity<TenantRecord, Integer> getIdentity() {
        return (Identity<TenantRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TenantRecord> getPrimaryKey() {
        return Keys.KEY_TENANT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TenantRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TENANT_IX_TENANT_NAME);
    }

    private transient TokendataPath _tokendata;

    /**
     * Get the implicit to-many join path to the <code>Token.TokenData</code>
     * table
     */
    public TokendataPath tokendata() {
        if (_tokendata == null)
            _tokendata = new TokendataPath(this, null, Keys.FK_TOKENDATA_TENANT_TENANTID.getInverseKey());

        return _tokendata;
    }

    @Override
    public Tenant as(String alias) {
        return new Tenant(DSL.name(alias), this);
    }

    @Override
    public Tenant as(Name alias) {
        return new Tenant(alias, this);
    }

    @Override
    public Tenant as(Table<?> alias) {
        return new Tenant(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(String name) {
        return new Tenant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(Name name) {
        return new Tenant(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(Table<?> name) {
        return new Tenant(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Condition condition) {
        return new Tenant(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tenant where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tenant whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
