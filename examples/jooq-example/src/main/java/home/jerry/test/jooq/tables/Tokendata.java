/*
 * This file is generated by jOOQ.
 */
package home.jerry.test.jooq.tables;


import home.jerry.test.jooq.Indexes;
import home.jerry.test.jooq.Keys;
import home.jerry.test.jooq.Token;
import home.jerry.test.jooq.tables.Servicetokendata.ServicetokendataPath;
import home.jerry.test.jooq.tables.Tenant.TenantPath;
import home.jerry.test.jooq.tables.Tokentype.TokentypePath;
import home.jerry.test.jooq.tables.records.TokendataRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tokendata extends TableImpl<TokendataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Token.TokenData</code>
     */
    public static final Tokendata TOKENDATA = new Tokendata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokendataRecord> getRecordType() {
        return TokendataRecord.class;
    }

    /**
     * The column <code>Token.TokenData.Id</code>.
     */
    public final TableField<TokendataRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Token.TokenData.TokenTypeId</code>.
     */
    public final TableField<TokendataRecord, Integer> TOKENTYPEID = createField(DSL.name("TokenTypeId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.TenantId</code>.
     */
    public final TableField<TokendataRecord, Integer> TENANTID = createField(DSL.name("TenantId"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.TokenIdentifier</code>.
     */
    public final TableField<TokendataRecord, String> TOKENIDENTIFIER = createField(DSL.name("TokenIdentifier"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.Hash</code>.
     */
    public final TableField<TokendataRecord, String> HASH = createField(DSL.name("Hash"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.EncryptedData</code>.
     */
    public final TableField<TokendataRecord, byte[]> ENCRYPTEDDATA = createField(DSL.name("EncryptedData"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.IsExpired</code>.
     */
    public final TableField<TokendataRecord, Byte> ISEXPIRED = createField(DSL.name("IsExpired"), SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.ExpiredUtcDateTime</code>.
     */
    public final TableField<TokendataRecord, LocalDateTime> EXPIREDUTCDATETIME = createField(DSL.name("ExpiredUtcDateTime"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>Token.TokenData.CreatedAtUtc</code>.
     */
    public final TableField<TokendataRecord, LocalDateTime> CREATEDATUTC = createField(DSL.name("CreatedAtUtc"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Token.TokenData.UpdatedAtUtc</code>.
     */
    public final TableField<TokendataRecord, LocalDateTime> UPDATEDATUTC = createField(DSL.name("UpdatedAtUtc"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>Token.TokenData.IsArchived</code>.
     */
    public final TableField<TokendataRecord, Byte> ISARCHIVED = createField(DSL.name("IsArchived"), SQLDataType.TINYINT.nullable(false), this, "");

    private Tokendata(Name alias, Table<TokendataRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tokendata(Name alias, Table<TokendataRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Token.TokenData</code> table reference
     */
    public Tokendata(String alias) {
        this(DSL.name(alias), TOKENDATA);
    }

    /**
     * Create an aliased <code>Token.TokenData</code> table reference
     */
    public Tokendata(Name alias) {
        this(alias, TOKENDATA);
    }

    /**
     * Create a <code>Token.TokenData</code> table reference
     */
    public Tokendata() {
        this(DSL.name("TokenData"), null);
    }

    public <O extends Record> Tokendata(Table<O> path, ForeignKey<O, TokendataRecord> childPath, InverseForeignKey<O, TokendataRecord> parentPath) {
        super(path, childPath, parentPath, TOKENDATA);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TokendataPath extends Tokendata implements Path<TokendataRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TokendataPath(Table<O> path, ForeignKey<O, TokendataRecord> childPath, InverseForeignKey<O, TokendataRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TokendataPath(Name alias, Table<TokendataRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TokendataPath as(String alias) {
            return new TokendataPath(DSL.name(alias), this);
        }

        @Override
        public TokendataPath as(Name alias) {
            return new TokendataPath(alias, this);
        }

        @Override
        public TokendataPath as(Table<?> alias) {
            return new TokendataPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Token.TOKEN;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TOKENDATA_IX_TOKENDATA_TENANTID, Indexes.TOKENDATA_IX_TOKENDATA_TOKENTYPEID);
    }

    @Override
    public Identity<TokendataRecord, Integer> getIdentity() {
        return (Identity<TokendataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokendataRecord> getPrimaryKey() {
        return Keys.KEY_TOKENDATA_PRIMARY;
    }

    @Override
    public List<ForeignKey<TokendataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TOKENDATA_TENANT_TENANTID, Keys.FK_TOKENDATA_TOKENTYPE_TOKENTYPEID);
    }

    private transient TenantPath _tenant;

    /**
     * Get the implicit join path to the <code>Token.Tenant</code> table.
     */
    public TenantPath tenant() {
        if (_tenant == null)
            _tenant = new TenantPath(this, Keys.FK_TOKENDATA_TENANT_TENANTID, null);

        return _tenant;
    }

    private transient TokentypePath _tokentype;

    /**
     * Get the implicit join path to the <code>Token.TokenType</code> table.
     */
    public TokentypePath tokentype() {
        if (_tokentype == null)
            _tokentype = new TokentypePath(this, Keys.FK_TOKENDATA_TOKENTYPE_TOKENTYPEID, null);

        return _tokentype;
    }

    private transient ServicetokendataPath _servicetokendata;

    /**
     * Get the implicit to-many join path to the
     * <code>Token.ServiceTokenData</code> table
     */
    public ServicetokendataPath servicetokendata() {
        if (_servicetokendata == null)
            _servicetokendata = new ServicetokendataPath(this, null, Keys.FK_SERVICETOKENDATA_TOKENDATA_TOKENDATAID.getInverseKey());

        return _servicetokendata;
    }

    @Override
    public Tokendata as(String alias) {
        return new Tokendata(DSL.name(alias), this);
    }

    @Override
    public Tokendata as(Name alias) {
        return new Tokendata(alias, this);
    }

    @Override
    public Tokendata as(Table<?> alias) {
        return new Tokendata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokendata rename(String name) {
        return new Tokendata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokendata rename(Name name) {
        return new Tokendata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokendata rename(Table<?> name) {
        return new Tokendata(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokendata where(Condition condition) {
        return new Tokendata(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokendata where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokendata where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokendata where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokendata where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokendata where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokendata where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokendata where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokendata whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokendata whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
