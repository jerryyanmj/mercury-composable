/*
 * This file is generated by jOOQ.
 */
package home.jerry.test.jooq.tables;


import home.jerry.test.jooq.Keys;
import home.jerry.test.jooq.Token;
import home.jerry.test.jooq.tables.Tokendata.TokendataPath;
import home.jerry.test.jooq.tables.records.TokentypeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Tokentype extends TableImpl<TokentypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Token.TokenType</code>
     */
    public static final Tokentype TOKENTYPE = new Tokentype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokentypeRecord> getRecordType() {
        return TokentypeRecord.class;
    }

    /**
     * The column <code>Token.TokenType.Id</code>.
     */
    public final TableField<TokentypeRecord, Integer> ID = createField(DSL.name("Id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Token.TokenType.Type</code>.
     */
    public final TableField<TokentypeRecord, String> TYPE = createField(DSL.name("Type"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>Token.TokenType.Description</code>.
     */
    public final TableField<TokentypeRecord, String> DESCRIPTION = createField(DSL.name("Description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>Token.TokenType.CreatedAtUtc</code>.
     */
    public final TableField<TokentypeRecord, LocalDateTime> CREATEDATUTC = createField(DSL.name("CreatedAtUtc"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Token.TokenType.UpdatedAtUtc</code>.
     */
    public final TableField<TokentypeRecord, LocalDateTime> UPDATEDATUTC = createField(DSL.name("UpdatedAtUtc"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>Token.TokenType.IsArchived</code>.
     */
    public final TableField<TokentypeRecord, Byte> ISARCHIVED = createField(DSL.name("IsArchived"), SQLDataType.TINYINT.nullable(false), this, "");

    private Tokentype(Name alias, Table<TokentypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tokentype(Name alias, Table<TokentypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>Token.TokenType</code> table reference
     */
    public Tokentype(String alias) {
        this(DSL.name(alias), TOKENTYPE);
    }

    /**
     * Create an aliased <code>Token.TokenType</code> table reference
     */
    public Tokentype(Name alias) {
        this(alias, TOKENTYPE);
    }

    /**
     * Create a <code>Token.TokenType</code> table reference
     */
    public Tokentype() {
        this(DSL.name("TokenType"), null);
    }

    public <O extends Record> Tokentype(Table<O> path, ForeignKey<O, TokentypeRecord> childPath, InverseForeignKey<O, TokentypeRecord> parentPath) {
        super(path, childPath, parentPath, TOKENTYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TokentypePath extends Tokentype implements Path<TokentypeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TokentypePath(Table<O> path, ForeignKey<O, TokentypeRecord> childPath, InverseForeignKey<O, TokentypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TokentypePath(Name alias, Table<TokentypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TokentypePath as(String alias) {
            return new TokentypePath(DSL.name(alias), this);
        }

        @Override
        public TokentypePath as(Name alias) {
            return new TokentypePath(alias, this);
        }

        @Override
        public TokentypePath as(Table<?> alias) {
            return new TokentypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Token.TOKEN;
    }

    @Override
    public Identity<TokentypeRecord, Integer> getIdentity() {
        return (Identity<TokentypeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokentypeRecord> getPrimaryKey() {
        return Keys.KEY_TOKENTYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TokentypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_TOKENTYPE_IX_TOKENTYPE_TYPE);
    }

    private transient TokendataPath _tokendata;

    /**
     * Get the implicit to-many join path to the <code>Token.TokenData</code>
     * table
     */
    public TokendataPath tokendata() {
        if (_tokendata == null)
            _tokendata = new TokendataPath(this, null, Keys.FK_TOKENDATA_TOKENTYPE_TOKENTYPEID.getInverseKey());

        return _tokendata;
    }

    @Override
    public Tokentype as(String alias) {
        return new Tokentype(DSL.name(alias), this);
    }

    @Override
    public Tokentype as(Name alias) {
        return new Tokentype(alias, this);
    }

    @Override
    public Tokentype as(Table<?> alias) {
        return new Tokentype(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokentype rename(String name) {
        return new Tokentype(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokentype rename(Name name) {
        return new Tokentype(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tokentype rename(Table<?> name) {
        return new Tokentype(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokentype where(Condition condition) {
        return new Tokentype(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokentype where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokentype where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokentype where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokentype where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokentype where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokentype where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tokentype where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokentype whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tokentype whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
