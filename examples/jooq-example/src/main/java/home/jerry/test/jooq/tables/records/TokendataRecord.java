/*
 * This file is generated by jOOQ.
 */
package home.jerry.test.jooq.tables.records;


import home.jerry.test.jooq.tables.Tokendata;

import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TokendataRecord extends UpdatableRecordImpl<TokendataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Token.TokenData.Id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Token.TokenData.Id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Token.TokenData.TokenTypeId</code>.
     */
    public void setTokentypeid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>Token.TokenData.TokenTypeId</code>.
     */
    public Integer getTokentypeid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>Token.TokenData.TenantId</code>.
     */
    public void setTenantid(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>Token.TokenData.TenantId</code>.
     */
    public Integer getTenantid() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>Token.TokenData.TokenIdentifier</code>.
     */
    public void setTokenidentifier(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>Token.TokenData.TokenIdentifier</code>.
     */
    public String getTokenidentifier() {
        return (String) get(3);
    }

    /**
     * Setter for <code>Token.TokenData.Hash</code>.
     */
    public void setHash(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>Token.TokenData.Hash</code>.
     */
    public String getHash() {
        return (String) get(4);
    }

    /**
     * Setter for <code>Token.TokenData.EncryptedData</code>.
     */
    public void setEncrypteddata(byte[] value) {
        set(5, value);
    }

    /**
     * Getter for <code>Token.TokenData.EncryptedData</code>.
     */
    public byte[] getEncrypteddata() {
        return (byte[]) get(5);
    }

    /**
     * Setter for <code>Token.TokenData.IsExpired</code>.
     */
    public void setIsexpired(Byte value) {
        set(6, value);
    }

    /**
     * Getter for <code>Token.TokenData.IsExpired</code>.
     */
    public Byte getIsexpired() {
        return (Byte) get(6);
    }

    /**
     * Setter for <code>Token.TokenData.ExpiredUtcDateTime</code>.
     */
    public void setExpiredutcdatetime(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>Token.TokenData.ExpiredUtcDateTime</code>.
     */
    public LocalDateTime getExpiredutcdatetime() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>Token.TokenData.CreatedAtUtc</code>.
     */
    public void setCreatedatutc(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>Token.TokenData.CreatedAtUtc</code>.
     */
    public LocalDateTime getCreatedatutc() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>Token.TokenData.UpdatedAtUtc</code>.
     */
    public void setUpdatedatutc(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>Token.TokenData.UpdatedAtUtc</code>.
     */
    public LocalDateTime getUpdatedatutc() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>Token.TokenData.IsArchived</code>.
     */
    public void setIsarchived(Byte value) {
        set(10, value);
    }

    /**
     * Getter for <code>Token.TokenData.IsArchived</code>.
     */
    public Byte getIsarchived() {
        return (Byte) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokendataRecord
     */
    public TokendataRecord() {
        super(Tokendata.TOKENDATA);
    }

    /**
     * Create a detached, initialised TokendataRecord
     */
    public TokendataRecord(Integer id, Integer tokentypeid, Integer tenantid, String tokenidentifier, String hash, byte[] encrypteddata, Byte isexpired, LocalDateTime expiredutcdatetime, LocalDateTime createdatutc, LocalDateTime updatedatutc, Byte isarchived) {
        super(Tokendata.TOKENDATA);

        setId(id);
        setTokentypeid(tokentypeid);
        setTenantid(tenantid);
        setTokenidentifier(tokenidentifier);
        setHash(hash);
        setEncrypteddata(encrypteddata);
        setIsexpired(isexpired);
        setExpiredutcdatetime(expiredutcdatetime);
        setCreatedatutc(createdatutc);
        setUpdatedatutc(updatedatutc);
        setIsarchived(isarchived);
        resetChangedOnNotNull();
    }
}
